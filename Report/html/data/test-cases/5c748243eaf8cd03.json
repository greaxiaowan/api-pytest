{
  "uid" : "5c748243eaf8cd03",
  "name" : "content参数不填",
  "fullName" : "test_centre.TestApiAuto#test_main",
  "historyId" : "339f685749c00c7ec77186b533b3b1b4",
  "time" : {
    "start" : 1604395762783,
    "stop" : 1604395762803,
    "duration" : 20
  },
  "description" : "信息录入-content",
  "descriptionHtml" : "<p>信息录入-content</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <apiPytest.test_run.test_centre.TestApiAuto object at 0x000000AB035F00B8>\ncase_id = 'case_021', interface = '信息录入-content', title = 'content参数不填'\nmethod = 'post', path = '/stage-api/message/task'\nheader = {'Accept': 'application/json, text/plain, */*', 'Authorization': 'eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjViYTV...4mVKypGVDVI4vo5vdJtJO3ES_otAvIKorsY_NXg', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8'}\nheader_change = 'Authorization'\nbody = {'areas': '575', 'beginsTime': '2020-07-22T06:48:00.000Z', 'engTime': '2020-07-23T06:48:00.000Z', 'messageCode': 'MSKX_DZ'}\nexcepted = {'code': 500, 'msg': 'null'}, depend = {}, is_db = 0, sql = None\nchange_word = None\n\n    @allure.testcase('https://www.cnblogs.com/jinggs/', '我的博客')\n    # 用例优先级\n    @allure.severity('critical')\n    @pytest.mark.parametrize('case_id, interface, title, method, path, header, header_change, body, excepted,'\n                             'depend, is_db, sql, change_word', cases)\n    def test_main(self, case_id, interface, title, method, path, header, header_change, body, excepted, depend, is_db,\n                  sql, change_word):\n        \"\"\"\n        :param case_id: 用例编号\n        :param interface: 接口信息\n        :param title: 用例标题\n        :param method: 请求方法\n        :param path: 请求路径\n        :param header: 请求头\n        :param header_change: 请求头修改字段\n        :param body: 请求体\n        :param excepted: 预期结果\n        :param depend: 依赖字段\n        :param is_db: 是否执行SQL\n        :param sql: SQL语句\n        :param change_word: 数据库依赖字段名\n        :param module_name: 模块名\n        :return:\n        \"\"\"\n        # 动态添加模块\n        # allure.dynamic.feature(module_name)\n        # 添加动态用例描述\n        allure.dynamic.description(interface)\n        # 动态添加用例标题\n        allure.dynamic.title(title)\n        logger.info('执行用例%s——', case_id)\n    \n        with allure.step('处理数据依赖，修改body'):\n            # 第一步，处理数据依赖，是否修改请求body，判断依赖类型，处理依赖\n            body = deal_depend.treat_data(is_db, change_word, sql, body, case_id, depend, sr, db_init)\n            # 保存实际的请求body\n            sr.save_body(case_id, body)\n        with allure.step('发送请求，得到响应'):\n            # 第二步，发送请求,得到实际的结果\n            test_result = request_me(token, host, path, body, method, header, header_change)\n            logger.info('实际响应为：%s' % test_result)\n        with allure.step('与预期结果比较断言'):\n            # 第三步，预期结果的每个key的value值跟实际响应的对应key的value比较断言，有1个断言失败就认为该用例执行失败。\n            # assert test_result == eval(excepted)\n            if isinstance(excepted, dict):\n>               ase.assert_job(test_result, excepted)\n\ntest_centre.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntest_result = {'code': 500, 'msg': None}\nexcepted = {'code': 500, 'msg': 'null'}\n\n    @staticmethod\n    def assert_job(test_result, excepted):\n        # 遍历返回结果的键值，每个值断言\n        for k, v in excepted.items():\n>           assert v == test_result[k]\nE           AssertionError\n\n..\\Common\\assert_re.py:22: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "信息录入-content",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <apiPytest.test_run.test_centre.TestApiAuto object at 0x000000AB035F00B8>\ncase_id = 'case_021', interface = '信息录入-content', title = 'content参数不填'\nmethod = 'post', path = '/stage-api/message/task'\nheader = {'Accept': 'application/json, text/plain, */*', 'Authorization': 'eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjViYTV...4mVKypGVDVI4vo5vdJtJO3ES_otAvIKorsY_NXg', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8'}\nheader_change = 'Authorization'\nbody = {'areas': '575', 'beginsTime': '2020-07-22T06:48:00.000Z', 'engTime': '2020-07-23T06:48:00.000Z', 'messageCode': 'MSKX_DZ'}\nexcepted = {'code': 500, 'msg': 'null'}, depend = {}, is_db = 0, sql = None\nchange_word = None\n\n    @allure.testcase('https://www.cnblogs.com/jinggs/', '我的博客')\n    # 用例优先级\n    @allure.severity('critical')\n    @pytest.mark.parametrize('case_id, interface, title, method, path, header, header_change, body, excepted,'\n                             'depend, is_db, sql, change_word', cases)\n    def test_main(self, case_id, interface, title, method, path, header, header_change, body, excepted, depend, is_db,\n                  sql, change_word):\n        \"\"\"\n        :param case_id: 用例编号\n        :param interface: 接口信息\n        :param title: 用例标题\n        :param method: 请求方法\n        :param path: 请求路径\n        :param header: 请求头\n        :param header_change: 请求头修改字段\n        :param body: 请求体\n        :param excepted: 预期结果\n        :param depend: 依赖字段\n        :param is_db: 是否执行SQL\n        :param sql: SQL语句\n        :param change_word: 数据库依赖字段名\n        :param module_name: 模块名\n        :return:\n        \"\"\"\n        # 动态添加模块\n        # allure.dynamic.feature(module_name)\n        # 添加动态用例描述\n        allure.dynamic.description(interface)\n        # 动态添加用例标题\n        allure.dynamic.title(title)\n        logger.info('执行用例%s——', case_id)\n    \n        with allure.step('处理数据依赖，修改body'):\n            # 第一步，处理数据依赖，是否修改请求body，判断依赖类型，处理依赖\n            body = deal_depend.treat_data(is_db, change_word, sql, body, case_id, depend, sr, db_init)\n            # 保存实际的请求body\n            sr.save_body(case_id, body)\n        with allure.step('发送请求，得到响应'):\n            # 第二步，发送请求,得到实际的结果\n            test_result = request_me(token, host, path, body, method, header, header_change)\n            logger.info('实际响应为：%s' % test_result)\n        with allure.step('与预期结果比较断言'):\n            # 第三步，预期结果的每个key的value值跟实际响应的对应key的value比较断言，有1个断言失败就认为该用例执行失败。\n            # assert test_result == eval(excepted)\n            if isinstance(excepted, dict):\n>               ase.assert_job(test_result, excepted)\n\ntest_centre.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntest_result = {'code': 500, 'msg': None}\nexcepted = {'code': 500, 'msg': 'null'}\n\n    @staticmethod\n    def assert_job(test_result, excepted):\n        # 遍历返回结果的键值，每个值断言\n        for k, v in excepted.items():\n>           assert v == test_result[k]\nE           AssertionError\n\n..\\Common\\assert_re.py:22: AssertionError",
    "steps" : [ {
      "name" : "处理数据依赖，修改body",
      "time" : {
        "start" : 1604395762784,
        "stop" : 1604395762784,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "发送请求，得到响应",
      "time" : {
        "start" : 1604395762784,
        "stop" : 1604395762802,
        "duration" : 18
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "与预期结果比较断言",
      "time" : {
        "start" : 1604395762803,
        "stop" : 1604395762803,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError\n",
      "statusTrace" : "  File \"E:\\mywork\\API_TEST\\apiPytest\\test_run\\test_centre.py\", line 115, in test_main\n    ase.assert_job(test_result, excepted)\n  File \"E:\\mywork\\API_TEST\\apiPytest\\Common\\assert_re.py\", line 22, in assert_job\n    assert v == test_result[k]\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "35be8e690d7ebd91",
      "name" : "log",
      "source" : "35be8e690d7ebd91.txt",
      "type" : "text/plain",
      "size" : 337
    }, {
      "uid" : "e95c80fb1885dce6",
      "name" : "stdout",
      "source" : "e95c80fb1885dce6.txt",
      "type" : "text/plain",
      "size" : 6
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "stepsCount" : 3,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "epic",
    "value" : "新华快讯项目"
  }, {
    "name" : "suite",
    "value" : "test_centre"
  }, {
    "name" : "subSuite",
    "value" : "TestApiAuto"
  }, {
    "name" : "host",
    "value" : "sms-pc"
  }, {
    "name" : "thread",
    "value" : "15100-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_centre"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "body",
    "value" : "{'messageCode': 'MSKX_DZ', 'beginsTime': '2020-07-22T06:48:00.000Z', 'engTime': '2020-07-23T06:48:00.000Z', 'areas': '575'}"
  }, {
    "name" : "case_id",
    "value" : "'case_021'"
  }, {
    "name" : "change_word",
    "value" : "None"
  }, {
    "name" : "depend",
    "value" : "{}"
  }, {
    "name" : "excepted",
    "value" : "{'msg': 'null', 'code': 500}"
  }, {
    "name" : "header",
    "value" : "{'Accept': 'application/json, text/plain, */*', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'Authorization': ''}"
  }, {
    "name" : "header_change",
    "value" : "'Authorization'"
  }, {
    "name" : "interface",
    "value" : "'信息录入-content'"
  }, {
    "name" : "is_db",
    "value" : "0"
  }, {
    "name" : "method",
    "value" : "'post'"
  }, {
    "name" : "path",
    "value" : "'/stage-api/message/task'"
  }, {
    "name" : "sql",
    "value" : "None"
  }, {
    "name" : "title",
    "value" : "'content参数不填'"
  } ],
  "links" : [ {
    "name" : "我的博客",
    "url" : "https://www.cnblogs.com/jinggs/",
    "type" : "test_case"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "5c748243eaf8cd03.json",
  "parameterValues" : [ "{'messageCode': 'MSKX_DZ', 'beginsTime': '2020-07-22T06:48:00.000Z', 'engTime': '2020-07-23T06:48:00.000Z', 'areas': '575'}", "'case_021'", "None", "{}", "{'msg': 'null', 'code': 500}", "{'Accept': 'application/json, text/plain, */*', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'Authorization': ''}", "'Authorization'", "'信息录入-content'", "0", "'post'", "'/stage-api/message/task'", "None", "'content参数不填'" ]
}