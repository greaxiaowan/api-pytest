{"name": "messageCode不正确", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <apiPytest.test_run.test_centre.TestApiAuto object at 0x000000AB035D86A0>\ncase_id = 'case_002', interface = '信息录入-MessageCode', title = 'messageCode不正确'\nmethod = 'post', path = '/stage-api/message/task'\nheader = {'Accept': 'application/json, text/plain, */*', 'Authorization': 'eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjViYTV...4mVKypGVDVI4vo5vdJtJO3ES_otAvIKorsY_NXg', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8'}\nheader_change = 'Authorization'\nbody = {'areas': '577', 'beginsTime': '2020-07-22T06:48:00.000Z', 'content': '22222222', 'engTime': '2020-07-23T06:48:00.000Z', ...}\nexcepted = {'code': 500, 'msg': '操作失败'}, depend = {}, is_db = 0, sql = None\nchange_word = None\n\n    @allure.testcase('https://www.cnblogs.com/jinggs/', '我的博客')\n    # 用例优先级\n    @allure.severity('critical')\n    @pytest.mark.parametrize('case_id, interface, title, method, path, header, header_change, body, excepted,'\n                             'depend, is_db, sql, change_word', cases)\n    def test_main(self, case_id, interface, title, method, path, header, header_change, body, excepted, depend, is_db,\n                  sql, change_word):\n        \"\"\"\n        :param case_id: 用例编号\n        :param interface: 接口信息\n        :param title: 用例标题\n        :param method: 请求方法\n        :param path: 请求路径\n        :param header: 请求头\n        :param header_change: 请求头修改字段\n        :param body: 请求体\n        :param excepted: 预期结果\n        :param depend: 依赖字段\n        :param is_db: 是否执行SQL\n        :param sql: SQL语句\n        :param change_word: 数据库依赖字段名\n        :param module_name: 模块名\n        :return:\n        \"\"\"\n        # 动态添加模块\n        # allure.dynamic.feature(module_name)\n        # 添加动态用例描述\n        allure.dynamic.description(interface)\n        # 动态添加用例标题\n        allure.dynamic.title(title)\n        logger.info('执行用例%s——', case_id)\n    \n        with allure.step('处理数据依赖，修改body'):\n            # 第一步，处理数据依赖，是否修改请求body，判断依赖类型，处理依赖\n            body = deal_depend.treat_data(is_db, change_word, sql, body, case_id, depend, sr, db_init)\n            # 保存实际的请求body\n            sr.save_body(case_id, body)\n        with allure.step('发送请求，得到响应'):\n            # 第二步，发送请求,得到实际的结果\n            test_result = request_me(token, host, path, body, method, header, header_change)\n            logger.info('实际响应为：%s' % test_result)\n        with allure.step('与预期结果比较断言'):\n            # 第三步，预期结果的每个key的value值跟实际响应的对应key的value比较断言，有1个断言失败就认为该用例执行失败。\n            # assert test_result == eval(excepted)\n            if isinstance(excepted, dict):\n>               ase.assert_job(test_result, excepted)\n\ntest_centre.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntest_result = {'code': 200, 'msg': '操作成功'}\nexcepted = {'code': 500, 'msg': '操作失败'}\n\n    @staticmethod\n    def assert_job(test_result, excepted):\n        # 遍历返回结果的键值，每个值断言\n        for k, v in excepted.items():\n>           assert v == test_result[k]\nE           AssertionError\n\n..\\Common\\assert_re.py:22: AssertionError"}, "description": "信息录入-MessageCode", "steps": [{"name": "处理数据依赖，修改body", "status": "passed", "start": 1604395761970, "stop": 1604395761970}, {"name": "发送请求，得到响应", "status": "passed", "start": 1604395761970, "stop": 1604395761995}, {"name": "与预期结果比较断言", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"E:\\mywork\\API_TEST\\apiPytest\\test_run\\test_centre.py\", line 115, in test_main\n    ase.assert_job(test_result, excepted)\n  File \"E:\\mywork\\API_TEST\\apiPytest\\Common\\assert_re.py\", line 22, in assert_job\n    assert v == test_result[k]\n"}, "start": 1604395761995, "stop": 1604395761995}], "attachments": [{"name": "log", "source": "c7b830e3-e5e4-4228-8dee-30cac3065902-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "bbbdac46-41bc-48fe-98a9-cf2b09abf20a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_id", "value": "'case_002'"}, {"name": "interface", "value": "'信息录入-MessageCode'"}, {"name": "title", "value": "'messageCode不正确'"}, {"name": "method", "value": "'post'"}, {"name": "path", "value": "'/stage-api/message/task'"}, {"name": "header", "value": "{'Accept': 'application/json, text/plain, */*', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'Authorization': ''}"}, {"name": "header_change", "value": "'Authorization'"}, {"name": "body", "value": "{'messageCode': 'PWJFJ', 'beginsTime': '2020-07-22T06:48:00.000Z', 'engTime': '2020-07-23T06:48:00.000Z', 'areas': '577', 'content': '22222222'}"}, {"name": "excepted", "value": "{'msg': '操作失败', 'code': 500}"}, {"name": "depend", "value": "{}"}, {"name": "is_db", "value": "0"}, {"name": "sql", "value": "None"}, {"name": "change_word", "value": "None"}], "start": 1604395761970, "stop": 1604395762002, "uuid": "a1c49bd6-4d91-4832-bdcf-596dce125b16", "historyId": "7478a10da49f8fc2feb223693a12aa1c", "testCaseId": "0e8c1fa6e6c27fd883b3c6d2d63f6c82", "fullName": "test_centre.TestApiAuto#test_main", "labels": [{"name": "severity", "value": "critical"}, {"name": "epic", "value": "新华快讯项目"}, {"name": "suite", "value": "test_centre"}, {"name": "subSuite", "value": "TestApiAuto"}, {"name": "host", "value": "sms-pc"}, {"name": "thread", "value": "15100-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_centre"}], "links": [{"type": "test_case", "url": "https://www.cnblogs.com/jinggs/", "name": "我的博客"}]}